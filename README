Vulnerable Code Example (C)
The following example is a simple program in C that demonstrates a race condition vulnerability. The program simulates a banking system where two threads attempt to withdraw money from the same account simultaneously.


Exploit
The race condition occurs because both threads check the account balance and then subtract the amount without proper synchronization. This can lead to both threads withdrawing money simultaneously, resulting in an incorrect final balance.

To exploit this vulnerability, you can run the program multiple times and observe that sometimes the final balance is incorrect.

You may see output like this:

Balance before withdrawal: 1000
Balance before withdrawal: 1000
Balance after withdrawal: 500
Balance after withdrawal: 500
Final balance: 500
Here, both threads checked the balance to be 1000 and then subtracted 500 each, resulting in an incorrect final balance of 500 instead of 0.



gcc -pthread -o race_condition_example race_condition_example.c


#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>

#define INITIAL_BALANCE 1000

typedef struct {
    int balance;
} Account;

void* withdraw(void* arg) {
    Account* account = (Account*)arg;
    int amount = 500;
    if (account->balance >= amount) {
        printf("Balance before withdrawal: %d\n", account->balance);
        account->balance -= amount;
        printf("Balance after withdrawal: %d\n", account->balance);
    } else {
        printf("Insufficient funds\n");
    }
    return NULL;
}

int main() {
    pthread_t t1, t2;
    Account account;
    account.balance = INITIAL_BALANCE;

    pthread_create(&t1, NULL, withdraw, &account);
    pthread_create(&t2, NULL, withdraw, &account);

    pthread_join(t1, NULL);
    pthread_join(t2, NULL);

    printf("Final balance: %d\n", account.balance);
    return 0;
}
